{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "generic-lang",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#callables"
		},
		{
			"include": "#ident"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#digits"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#labels"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.generic-lang",
					"match": "\\b(if|else|while|for|foreach|return|and|or|in|break|continue|switch|case|default|unless|until|import|from|as|yield|async|await|try|finally|throw)\\b"
				},
				{
					"name": "keyword.control.decorator.generic-lang",
					"match": "@"
				},
				{
					"name": "constant.language.null.generic-lang",
					"match": "\\b(nil|StopIteration)\\b"
				},
				{
					"name": "constant.language.boolean.generic-lang",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "support.function.builtin.generic-lang",
					"match": "\\b(print|str|type|clock|sqrt|input|int|is_int|float|rng|len|sleep|assert)\\b"
				},
				{
					"name": "variable.language.generic-lang",
					"match": "\\b(this|super|__name__)\\b"
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"match": "\\b(var|const)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "storage.type.generic-lang"
						},
						"2": {
							"name": "support.variable.generic-lang"
						}
					}
				},
				{
					"match": "\\b(fun)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(([A-Za-z0-9_,\\s]*)\\)",
					"captures": {
						"1": {
							"name": "storage.type.function.generic-lang"
						},
						"2": {
							"name": "entity.name.function.generic-lang"
						},
						"3": {
							"patterns": [
								{
									"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
									"name": "variable.parameter.generic-lang"
								}
							]
						}
					}
				},
				{
					"match": "(->)\\s*\\(([A-Za-z0-9_,\\s]*)\\)",
					"captures": {
						"1": {
							"name": "storage.type.lambda.generic-lang"
						},
						"2": {
							"patterns": [
								{
									"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
									"name": "variable.parameter.generic-lang"
								}
							]
						}
					}
				},
				{
					"match": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)(?:\\s*(<)\\s*([A-Za-z_][A-Za-z0-9_]*))?\\b",
					"captures": {
						"1": {
							"name": "storage.type.class.generic-lang"
						},
						"2": {
							"name": "entity.name.type.class.generic-lang"
						},
						"3": {
							"name": "storage.modifier.generic-lang"
						},
						"4": {
							"name": "entity.name.type.class.generic-lang"
						}
					}
				},
				{
					"match": "\\b(catch)\\s*\\(\\s*([A-Za-z_][A-Za-z0-9_]*(?:\\s*,\\s*[A-Za-z_][A-Za-z0-9_]*)*)\\s*\\)\\s*(?:\\b(as)\\b\\s*([A-Za-z_][A-Za-z0-9_]*))?",
					"captures": {
						"1": { "name": "keyword.control.generic-lang" },
						"2": {
						"patterns": [
							{
								"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
								"name": "entity.name.type.class.generic-lang"
							},
							{
								"match": ",",
								"name": "punctuation.separator.element.generic-lang"
							}
						]
						},
						"3": {
							"name": "keyword.control.generic-lang"
						},
						"4": {
							"name": "variable.other.exception.generic-lang"
						}
					}
				},
				{
					"match": "\\b(catch)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*(?:\\b(as)\\b\\s*([A-Za-z_][A-Za-z0-9_]*))?",
					"captures": {
						"1": {
							"name": "keyword.control.generic-lang"
						},
						"2": {
							"name": "entity.name.type.class.generic-lang"
						},
						"3": {
							"name": "keyword.control.generic-lang"
						},
						"4": {
							"name": "variable.other.exception.generic-lang"
						}
					}
				}
			]
		},
		"callables": {
			"patterns": [
				{
					"match": "\\b([A-Z][A-Za-z0-9]*)\\s*\\(",
					"captures": {
						"1": { "name": "entity.name.type.class.generic-lang" }
					}
				},
				{
					"match": "\\b([a-z_][A-Za-z0-9_]*)\\s*\\(",
					"captures": {
						"1": { "name": "support.function.generic-lang" }
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.generic-lang",
			"begin": "\"",
			"end": "\"",
			"patterns": []
		},
		"digits": {
			"patterns": [
				{
					"name": "constant.numeric.generic-lang",
					"match": "\\b[0-9]+(?:.[0-9]+)?\\b"
				}
			]
		},
		"ident": {
			"patterns": [
				{
					"name": "variable.other.readwrite.generic-lang",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign",
					"match": "#.*"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "(==|!=|<=|>=|<|>)",
					"name": "keyword.operator.comparison.generic-lang"
				},
				{
					"match": "=|\\*=|-=|\\+=|\\^=|\\|=|%=|&=",
					"name": "keyword.operator.assignment.generic-lang"
				},
				{
					"match": "(\\+|-|\\*|\\/|\\^|\\*\\*|\\||%|&|\\/\\/)",
					"name": "keyword.operator.arithmetic.generic-lang"
				},
				{
					"match": "\\?|:",
					"name": "keyword.operator.ternary.generic-lang"
				}
			]
		},
		"labels": {
			"patterns": [
				{
					"name": "entity.other.attribute-name.label.generic-lang",
					"match": "'[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		}
	},
	"scopeName": "source.generic-lang"
}